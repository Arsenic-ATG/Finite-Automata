<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="_f_a_8h" kind="file" language="C++">
    <compoundname>FA.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">utility</includes>
    <includedby refid="_f_a_8cpp" local="yes">/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp</includedby>
    <includedby refid="convertor_8cpp" local="yes">/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/convertor.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h</label>
        <link refid="_f_a_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>map</label>
      </node>
      <node id="3">
        <label>set</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innerclass refid="classfa_1_1finite__automata" prot="public">fa::finite_automata</innerclass>
    <innernamespace refid="namespacefa">fa</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>FA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fa</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>int;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>symbol<sp/>=<sp/>char;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Each<sp/>STATE<sp/>on<sp/>scanning<sp/>a<sp/>symbol<sp/>maps<sp/>to<sp/>a<sp/>set<sp/>of<sp/>states.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>transition_table<sp/>=<sp/>std::map<sp/>&lt;std::pair<sp/>&lt;state,<sp/>symbol&gt;,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set<sp/>&lt;state&gt;&gt;;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>finite<sp/>autometa<sp/>is<sp/>a<sp/>5<sp/>tupple<sp/>(<sp/>Q,<sp/>sigma,<sp/>delta,<sp/>F,<sp/>q0<sp/>).<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="classfa_1_1finite__automata" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfa_1_1finite__automata" kindref="compound">finite_automata</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="classfa_1_1finite__automata_1ae31703cd06c2e7d37d38d5f3a061f296" kindref="member">finite_automata</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;state&gt;<sp/>states,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;symbol&gt;<sp/>input_alpha,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;state&gt;<sp/>final_states,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state<sp/>initial_state,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transition_table<sp/>relations);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="classfa_1_1finite__automata_1ae31703cd06c2e7d37d38d5f3a061f296" kindref="member">finite_automata</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;symbol&gt;<sp/>input_alpha,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state<sp/>initial_state,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>transition_table<sp/>ralations,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;state&gt;<sp/>final_states);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="classfa_1_1finite__automata_1ae31703cd06c2e7d37d38d5f3a061f296" kindref="member">finite_automata</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state<sp/>initial_state,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>transition_table<sp/>ralations,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;state&gt;<sp/>final_states);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>make<sp/>one<sp/>for<sp/>regex<sp/>also.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>simulate<sp/>(std::string<sp/>word)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>bool;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classfa_1_1finite__automata_1ac9abcd3ecbd7934796de66ea3be42a78" kindref="member">move</ref><sp/>(state<sp/>current_state,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol<sp/>scanned_symbol)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>std::set<sp/>&lt;state&gt;;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classfa_1_1finite__automata_1ac9abcd3ecbd7934796de66ea3be42a78" kindref="member">move</ref><sp/>(std::set<sp/>&lt;state&gt;<sp/>states,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol<sp/>scanned_symbol)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>std::set<sp/>&lt;state&gt;;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classfa_1_1finite__automata_1a6d8420f1b6f14ccf4d675e6d5f512b7c" kindref="member">epsilon_closure</ref><sp/>(state<sp/>st)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>std::set<sp/>&lt;state&gt;;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classfa_1_1finite__automata_1a6d8420f1b6f14ccf4d675e6d5f512b7c" kindref="member">epsilon_closure</ref><sp/>(std::set<sp/>&lt;state&gt;<sp/>st)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>std::set<sp/>&lt;state&gt;;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>maybe<sp/>a<sp/>function<sp/>to<sp/>check<sp/>sanity<sp/>of<sp/>the<sp/>automata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_states<sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_Q;};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_input_chars<sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_input;};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_finalstates<sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_F;};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_initialstate<sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_q0;};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_transition_relations<sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="57"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tr;<sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_is_DFA;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;state&gt;<sp/>m_Q;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;symbol&gt;<sp/>m_input;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set<sp/>&lt;state&gt;<sp/>m_F;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state<sp/>m_q0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>transition_table<sp/>m_tr;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>calc_state_set<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>transition_table<sp/>&amp;relations)<sp/>-&gt;<sp/>std::set&lt;state&gt;;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>calc_input_alpha<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>transition_table<sp/>&amp;relations)<sp/>-&gt;<sp/>std::set&lt;symbol&gt;;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>convert_to_dfa<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfa_1_1finite__automata" kindref="compound">finite_automata</ref><sp/>&amp;nfa)<sp/>-&gt;<sp/><ref refid="classfa_1_1finite__automata" kindref="compound">finite_automata</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FA_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h"/>
  </compounddef>
</doxygen>
