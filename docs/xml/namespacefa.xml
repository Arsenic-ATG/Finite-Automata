<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacefa" kind="namespace" language="C++">
    <compoundname>fa</compoundname>
    <innerclass refid="classfa_1_1finite__automata" prot="public">fa::finite_automata</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_f_a_8h_1aca4326ba491c1f4c49b371246a09b61f" prot="public" static="no">
        <type>int</type>
        <definition>using fa::state = typedef int</definition>
        <argsstring></argsstring>
        <name>state</name>
        <qualifiedname>fa::state</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="12" column="1" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_f_a_8h_1ac4df69ec9d9c853a13696f82b9834658" prot="public" static="no">
        <type>char</type>
        <definition>using fa::symbol = typedef char</definition>
        <argsstring></argsstring>
        <name>symbol</name>
        <qualifiedname>fa::symbol</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="13" column="1" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_f_a_8h_1aad32d6750291553d60f3d46c6559fb2e" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; state, symbol &gt;, std::set&lt; state &gt; &gt;</type>
        <definition>using fa::transition_table = typedef std::map &lt;std::pair &lt;state, symbol&gt;, std::set &lt;state&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>transition_table</name>
        <qualifiedname>fa::transition_table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="16" column="1" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_f_a_8h_1ae3eef554995e8118b43747aadf670bb8" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto fa::epsilon</definition>
        <argsstring></argsstring>
        <name>epsilon</name>
        <qualifiedname>fa::epsilon</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="11" column="16" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_f_a_8h_1a2f40c79e4e9ff61e595de1ef74cfb5a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>std::set&lt; state &gt; fa::calc_state_set</definition>
        <argsstring>(const transition_table &amp;relations) -&gt; std::set&lt; state &gt;</argsstring>
        <name>calc_state_set</name>
        <qualifiedname>fa::calc_state_set</qualifiedname>
        <param>
          <type>const transition_table &amp;</type>
          <declname>relations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility function to calculate state set from given transition relations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="69" column="6" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="176" bodyend="189" declfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_f_a_8h_1afba5b78ef97d97336953055317395f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>std::set&lt; symbol &gt; fa::calc_input_alpha</definition>
        <argsstring>(const transition_table &amp;relations) -&gt; std::set&lt; symbol &gt;</argsstring>
        <name>calc_input_alpha</name>
        <qualifiedname>fa::calc_input_alpha</qualifiedname>
        <param>
          <type>const transition_table &amp;</type>
          <declname>relations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utility function to calculate set of input alphabets from given transition relations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="70" column="6" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="196" bodyend="206" declfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" declline="70" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_f_a_8h_1a29de1583f51830cc6a05d602dba2ece4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>finite_automata fa::convert_to_dfa</definition>
        <argsstring>(const finite_automata &amp;nfa) -&gt; finite_automata</argsstring>
        <name>convert_to_dfa</name>
        <qualifiedname>fa::convert_to_dfa</qualifiedname>
        <param>
          <type>const <ref refid="classfa_1_1finite__automata" kindref="compound">finite_automata</ref> &amp;</type>
          <declname>nfa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to convert given NFA to equivalant DFA via subset construction method. The function doesn&apos;t gurentee the DFA to be minimised DFA. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="71" column="6" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="214" bodyend="280" declfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" declline="71" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="8" column="1"/>
  </compounddef>
</doxygen>
