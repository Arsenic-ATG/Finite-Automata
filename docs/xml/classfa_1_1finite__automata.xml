<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classfa_1_1finite__automata" kind="class" language="C++" prot="public">
    <compoundname>fa::finite_automata</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfa_1_1finite__automata_1ab4576816ba0b0cf100194dad3fffe4cf" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fa::finite_automata::m_is_DFA</definition>
        <argsstring></argsstring>
        <name>m_is_DFA</name>
        <qualifiedname>fa::finite_automata::m_is_DFA</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="61" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfa_1_1finite__automata_1a1b36210107d443de2e64287273e66b24" prot="private" static="no" mutable="no">
        <type>const std::set&lt; state &gt;</type>
        <definition>const std::set&lt;state&gt; fa::finite_automata::m_Q</definition>
        <argsstring></argsstring>
        <name>m_Q</name>
        <qualifiedname>fa::finite_automata::m_Q</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="62" column="19" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfa_1_1finite__automata_1ac912461a2acc29f70a554e7912aa100e" prot="private" static="no" mutable="no">
        <type>const std::set&lt; symbol &gt;</type>
        <definition>const std::set&lt;symbol&gt; fa::finite_automata::m_input</definition>
        <argsstring></argsstring>
        <name>m_input</name>
        <qualifiedname>fa::finite_automata::m_input</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="63" column="19" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfa_1_1finite__automata_1ae08781ebc255645a865d75416f1d3cdb" prot="private" static="no" mutable="no">
        <type>const std::set&lt; state &gt;</type>
        <definition>const std::set&lt;state&gt; fa::finite_automata::m_F</definition>
        <argsstring></argsstring>
        <name>m_F</name>
        <qualifiedname>fa::finite_automata::m_F</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="64" column="19" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfa_1_1finite__automata_1a876a4f95ef02f3136ccbece7a041bbdb" prot="private" static="no" mutable="no">
        <type>const state</type>
        <definition>const state fa::finite_automata::m_q0</definition>
        <argsstring></argsstring>
        <name>m_q0</name>
        <qualifiedname>fa::finite_automata::m_q0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="65" column="15" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfa_1_1finite__automata_1a6a21a7037505dcdf0c1c1daea19859be" prot="private" static="no" mutable="no">
        <type>const transition_table</type>
        <definition>const transition_table fa::finite_automata::m_tr</definition>
        <argsstring></argsstring>
        <name>m_tr</name>
        <qualifiedname>fa::finite_automata::m_tr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="66" column="26" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfa_1_1finite__automata_1ae31703cd06c2e7d37d38d5f3a061f296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>finite_automata::finite_automata</definition>
        <argsstring>(const std::set&lt; state &gt; states, const std::set&lt; symbol &gt; input_alpha, const std::set&lt; state &gt; final_states, const state initial_state, transition_table relations)</argsstring>
        <name>finite_automata</name>
        <qualifiedname>fa::finite_automata::finite_automata</qualifiedname>
        <param>
          <type>const std::set&lt; state &gt;</type>
          <declname>states</declname>
        </param>
        <param>
          <type>const std::set&lt; symbol &gt;</type>
          <declname>input_alpha</declname>
        </param>
        <param>
          <type>const std::set&lt; state &gt;</type>
          <declname>final_states</declname>
        </param>
        <param>
          <type>const state</type>
          <declname>initial_state</declname>
        </param>
        <param>
          <type>transition_table</type>
          <declname>relations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor of class finite_autometa. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="24" column="3" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="14" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1a5f40b13afd7cd767eeef3bec7aa9ea43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>finite_automata::finite_automata</definition>
        <argsstring>(const std::set&lt; symbol &gt; input_alpha, const state initial_state, const transition_table ralations, const std::set&lt; state &gt; final_states)</argsstring>
        <name>finite_automata</name>
        <qualifiedname>fa::finite_automata::finite_automata</qualifiedname>
        <param>
          <type>const std::set&lt; symbol &gt;</type>
          <declname>input_alpha</declname>
        </param>
        <param>
          <type>const state</type>
          <declname>initial_state</declname>
        </param>
        <param>
          <type>const transition_table</type>
          <declname>ralations</declname>
        </param>
        <param>
          <type>const std::set&lt; state &gt;</type>
          <declname>final_states</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor of class finite_autometa. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="30" column="3" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="27" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1a52194aae4bd26784d152e6086f993e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>finite_automata::finite_automata</definition>
        <argsstring>(const state initial_state, const transition_table ralations, const std::set&lt; state &gt; final_states)</argsstring>
        <name>finite_automata</name>
        <qualifiedname>fa::finite_automata::finite_automata</qualifiedname>
        <param>
          <type>const state</type>
          <declname>initial_state</declname>
        </param>
        <param>
          <type>const transition_table</type>
          <declname>ralations</declname>
        </param>
        <param>
          <type>const std::set&lt; state &gt;</type>
          <declname>final_states</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor of class finite_autometa. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="35" column="3" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1a58940bd0504cc6b81d68f4b27bef821a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>bool finite_automata::simulate</definition>
        <argsstring>(std::string word) const -&gt; bool</argsstring>
        <name>simulate</name>
        <qualifiedname>fa::finite_automata::simulate</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>word</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="40" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="89" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1ac9abcd3ecbd7934796de66ea3be42a78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>std::set&lt; state &gt; finite_automata::move</definition>
        <argsstring>(state current_state, symbol scanned_symbol) const -&gt; std::set&lt; state &gt;</argsstring>
        <name>move</name>
        <qualifiedname>fa::finite_automata::move</qualifiedname>
        <param>
          <type>state</type>
          <declname>current_state</declname>
        </param>
        <param>
          <type>symbol</type>
          <declname>scanned_symbol</declname>
          <defname>input_symbol</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to move from one state to another based on the trasition relation defined by the autometa and return the set of new states the autometa can move to and return empty set in case the transition relation doesn&apos;t exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="41" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="52" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1acbc50ad41da15371bf3d747007452916" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>std::set&lt; state &gt; finite_automata::move</definition>
        <argsstring>(std::set&lt; state &gt; states, symbol scanned_symbol) const -&gt; std::set&lt; state &gt;</argsstring>
        <name>move</name>
        <qualifiedname>fa::finite_automata::move</qualifiedname>
        <param>
          <type>std::set&lt; state &gt;</type>
          <declname>states</declname>
        </param>
        <param>
          <type>symbol</type>
          <declname>scanned_symbol</declname>
          <defname>input_symbol</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to move from a set of states to another based on the trasition relation defined by the autometa and return the set of new states the autometa can move to and return empty set in case the transition relation doesn&apos;t exist. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="43" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="72" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1a6d8420f1b6f14ccf4d675e6d5f512b7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>std::set&lt; state &gt; finite_automata::epsilon_closure</definition>
        <argsstring>(state st) const -&gt; std::set&lt; state &gt;</argsstring>
        <name>epsilon_closure</name>
        <qualifiedname>fa::finite_automata::epsilon_closure</qualifiedname>
        <param>
          <type>state</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>epsilon_closure of state ST ( fo the current FA) is a set of states that are reachable from the state St wihout scanning a symbol from the tape (on an epsilon move). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="46" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="116" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1ab8749667a6d5cb7e7c75e3ac36b75ab4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>std::set&lt; state &gt; finite_automata::epsilon_closure</definition>
        <argsstring>(std::set&lt; state &gt; st) const -&gt; std::set&lt; state &gt;</argsstring>
        <name>epsilon_closure</name>
        <qualifiedname>fa::finite_automata::epsilon_closure</qualifiedname>
        <param>
          <type>std::set&lt; state &gt;</type>
          <declname>st</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate epsilon_clsore of a compaund state ST (represented as a set of states ). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="47" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.cpp" bodystart="145" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1aa5b7b40dfb3e14c48d389fe5e7258178" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto fa::finite_automata::get_states</definition>
        <argsstring>() const</argsstring>
        <name>get_states</name>
        <qualifiedname>fa::finite_automata::get_states</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="52" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1a576918b44adac946bbd003581c8e0d3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto fa::finite_automata::get_input_chars</definition>
        <argsstring>() const</argsstring>
        <name>get_input_chars</name>
        <qualifiedname>fa::finite_automata::get_input_chars</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="53" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1a9a49c0b68e9754ce987cb1d26bb7e105" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto fa::finite_automata::get_finalstates</definition>
        <argsstring>() const</argsstring>
        <name>get_finalstates</name>
        <qualifiedname>fa::finite_automata::get_finalstates</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="54" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1a0521f3a0d363d3c73f3d15a8be3c7304" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto fa::finite_automata::get_initialstate</definition>
        <argsstring>() const</argsstring>
        <name>get_initialstate</name>
        <qualifiedname>fa::finite_automata::get_initialstate</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="55" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classfa_1_1finite__automata_1a37d98aad54fd8c224a5a6d58ab7a4a9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto fa::finite_automata::get_transition_relations</definition>
        <argsstring>() const</argsstring>
        <name>get_transition_relations</name>
        <qualifiedname>fa::finite_automata::get_transition_relations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="56" column="8" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="56" bodyend="57"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" line="20" column="1" bodyfile="/Users/ankursaini/Desktop/project stuff/NFA2DFA/src/FA.h" bodystart="21" bodyend="67"/>
    <listofallmembers>
      <member refid="classfa_1_1finite__automata_1a6d8420f1b6f14ccf4d675e6d5f512b7c" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>epsilon_closure</name></member>
      <member refid="classfa_1_1finite__automata_1ab8749667a6d5cb7e7c75e3ac36b75ab4" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>epsilon_closure</name></member>
      <member refid="classfa_1_1finite__automata_1ae31703cd06c2e7d37d38d5f3a061f296" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>finite_automata</name></member>
      <member refid="classfa_1_1finite__automata_1a5f40b13afd7cd767eeef3bec7aa9ea43" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>finite_automata</name></member>
      <member refid="classfa_1_1finite__automata_1a52194aae4bd26784d152e6086f993e77" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>finite_automata</name></member>
      <member refid="classfa_1_1finite__automata_1a9a49c0b68e9754ce987cb1d26bb7e105" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>get_finalstates</name></member>
      <member refid="classfa_1_1finite__automata_1a0521f3a0d363d3c73f3d15a8be3c7304" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>get_initialstate</name></member>
      <member refid="classfa_1_1finite__automata_1a576918b44adac946bbd003581c8e0d3d" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>get_input_chars</name></member>
      <member refid="classfa_1_1finite__automata_1aa5b7b40dfb3e14c48d389fe5e7258178" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>get_states</name></member>
      <member refid="classfa_1_1finite__automata_1a37d98aad54fd8c224a5a6d58ab7a4a9e" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>get_transition_relations</name></member>
      <member refid="classfa_1_1finite__automata_1ae08781ebc255645a865d75416f1d3cdb" prot="private" virt="non-virtual"><scope>fa::finite_automata</scope><name>m_F</name></member>
      <member refid="classfa_1_1finite__automata_1ac912461a2acc29f70a554e7912aa100e" prot="private" virt="non-virtual"><scope>fa::finite_automata</scope><name>m_input</name></member>
      <member refid="classfa_1_1finite__automata_1ab4576816ba0b0cf100194dad3fffe4cf" prot="private" virt="non-virtual"><scope>fa::finite_automata</scope><name>m_is_DFA</name></member>
      <member refid="classfa_1_1finite__automata_1a1b36210107d443de2e64287273e66b24" prot="private" virt="non-virtual"><scope>fa::finite_automata</scope><name>m_Q</name></member>
      <member refid="classfa_1_1finite__automata_1a876a4f95ef02f3136ccbece7a041bbdb" prot="private" virt="non-virtual"><scope>fa::finite_automata</scope><name>m_q0</name></member>
      <member refid="classfa_1_1finite__automata_1a6a21a7037505dcdf0c1c1daea19859be" prot="private" virt="non-virtual"><scope>fa::finite_automata</scope><name>m_tr</name></member>
      <member refid="classfa_1_1finite__automata_1ac9abcd3ecbd7934796de66ea3be42a78" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>move</name></member>
      <member refid="classfa_1_1finite__automata_1acbc50ad41da15371bf3d747007452916" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>move</name></member>
      <member refid="classfa_1_1finite__automata_1a58940bd0504cc6b81d68f4b27bef821a" prot="public" virt="non-virtual"><scope>fa::finite_automata</scope><name>simulate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
